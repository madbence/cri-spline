// Generated by CoffeeScript 1.4.0
var Hermite, Vector;

Vector = (function() {

  function Vector(x, y, z) {
    this.x = x != null ? x : 0;
    this.y = y != null ? y : 0;
    this.z = z != null ? z : 0;
  }

  Vector.prototype.add = function(v) {
    return new Vector(this.x + v.x, this.y + v.y, this.z + v.z);
  };

  Vector.prototype.sub = function(v) {
    return new Vector(this.x - v.x, this.y - v.y, this.z - v.z);
  };

  Vector.prototype.dot = function(v) {
    return this.x * v.x + this.y * v.y + this.z * v.z;
  };

  Vector.prototype.cross = function(v) {
    return new Vector(this.y * v.z - this.z * v.y, -this.x * v.z + this.z * v.x, this.x * v.y - this.y * v.x);
  };

  Vector.prototype.len = function() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
  };

  Vector.prototype.lenSq = function() {
    return this.x * this.x + this.y * this.y + this.z * this.z;
  };

  Vector.prototype.mul = function(a) {
    return new Vector(this.x * a, this.y * a, this.z * a);
  };

  Vector.prototype.div = function(a) {
    return new Vector(this.x / a, this.y / a, this.z / a);
  };

  Vector.prototype.unit = function() {
    return this.div(this.len());
  };

  Vector.prototype.left = function() {
    return new Vector(this.y, -this.x);
  };

  Vector.prototype.right = function() {
    return new Vector(-this.y, this.x);
  };

  Vector.prototype.toString = function() {
    return '[' + this.x + ',' + this.y + ',' + this.z + ']';
  };

  return Vector;

})();

Hermite = (function() {

  function Hermite(p) {
    this.p = p;
  }

  Hermite.prototype.init = function() {
    var i;
    this.t = (function() {
      var _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = this.p.length; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push(this.tFun(i));
      }
      return _results;
    }).call(this);
    return this.v = (function() {
      var _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = this.p.length; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push(this.vFun(i));
      }
      return _results;
    }).call(this);
  };

  Hermite.prototype.draw = function(c, time) {
    var i, j, p, t, v, _i, _j, _ref;
    time %= this.t[this.t.length - 1];
    c.beginPath();
    for (i = _i = 0, _ref = this.p.length - 2; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      for (j = _j = 0; _j <= 100; j = ++_j) {
        t = this.t[i] + j / 100 * (this.t[i + 1] - this.t[i]);
        p = this.get(t);
        c.lineTo(p.x, p.y);
      }
    }
    c.stroke();
    try {
      c.beginPath();
      p = this.get(time);
      v = this.getV(time);
      c.moveTo(p.x, p.y);
      c.lineTo(p.x + v.x, p.y + v.y);
      return c.stroke();
    } catch (ex) {

    }
  };

  Hermite.prototype.coeff = function(i, dt) {
    return [this.p[i], this.v[i], this.p[i + 1].sub(this.p[i]).mul(3).div(dt * dt).sub(this.v[i + 1].add(this.v[i].mul(2)).div(dt)), this.p[i].sub(this.p[i + 1]).mul(2).div(dt * dt * dt).add(this.v[i + 1].add(this.v[i]).div(dt * dt))];
  };

  Hermite.prototype.seg = function(t) {
    var i, j, _i, _ref;
    i = 0;
    for (j = _i = i, _ref = this.p.length; i <= _ref ? _i <= _ref : _i >= _ref; j = i <= _ref ? ++_i : --_i) {
      if (t > this.t[j]) {
        i = j;
      }
    }
    return i;
  };

  Hermite.prototype.get = function(t) {
    var a, dt, i, tt;
    i = this.seg(t);
    dt = this.t[i + 1] - this.t[i];
    tt = t - this.t[i];
    a = this.coeff(i, dt);
    return a[0].add(a[1].mul(tt)).add(a[2].mul(tt * tt)).add(a[3].mul(tt * tt * tt));
  };

  Hermite.prototype.getV = function(t) {
    var a, dt, i, tt;
    i = this.seg(t);
    dt = this.t[i + 1] - this.t[i];
    tt = t - this.t[i];
    a = this.coeff(i, dt);
    return a[1].add(a[2].mul(tt * 2)).add(a[3].mul(tt * tt * 3));
  };

  return Hermite;

})();

window.onload = function() {
  var canvas, cr, cri, ctx, draw, start;
  canvas = document.getElementById('myCanvas');
  ctx = canvas.getContext('2d');
  cri = new Hermite([]);
  cr = new Hermite([]);
  start = new Date().getTime();
  cri.tFun = cr.tFun = function(i) {
    return i + Math.sin(i / 5) * 0.4;
  };
  cri.vFun = function(i) {
    if (i > 0 && i < this.p.length - 1) {
      return this.p[i + 1].sub(this.p[i - 1]).div(this.t[i + 1] - this.t[i - 1]);
    } else {
      return new Vector;
    }
  };
  canvas.onclick = function(e) {
    cr.p.push(new Vector(e.offsetX, e.offsetY));
    cri.p.push(new Vector(e.offsetX, e.offsetY));
    cri.init();
    return draw();
  };
  draw = function() {
    var elapsed;
    elapsed = (new Date().getTime() - start) / 1000;
    ctx.clearRect(0, 0, 600, 600);
    cri.draw(ctx, elapsed);
    return webkitRequestAnimationFrame(draw);
  };
  return draw();
};
